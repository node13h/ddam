stages:
  - lint
  - test
  - build
  - scan
  - publish

variables:
  PUBLISH_IMAGE: 'docker.io/alikov/ddam'
  PYTHON_CI_IMAGE: docker.io/alikov/ci-python:3.13
  BUILDAH_CI_IMAGE: quay.io/buildah/stable:v1.39.2
  TRIVY_CI_IMAGE: docker.io/aquasec/trivy:0.61.0
  TRIVY_NO_PROGRESS: "true"
  # https://aquasecurity.github.io/trivy/v0.59/docs/configuration/filtering/#trivyignoreyaml
  TRIVY_IGNOREFILE: ./.trivyignore.yaml
  PYTHON_BASE_IMAGE: docker.io/python:3.13.2-slim-bookworm

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG


.with-local-pip-repo:
  cache:
    - key:
        files:
          - poetry.lock
      paths:
        - ci/pip-repo

.with-registry-login:
  before_script:
    - |
      set -eu
      if [ -n "${CI_REGISTRY_USER:+notempty}" ]; then
          printf -- '%s' "$CI_REGISTRY_PASSWORD" \
              | sudo -u build --preserve-env=REGISTRY_AUTH_FILE buildah login \
                     --username "$CI_REGISTRY_USER" \
                     --password-stdin \
                     "$CI_REGISTRY"
      fi

.with-trivy-cache:
  variables:
    TRIVY_CACHE_DIR: ci/cache/trivy
  cache:
    - key: trivy
      paths:
        - $TRIVY_CACHE_DIR

requirements:
  image: $PYTHON_CI_IMAGE
  extends:
    - .with-local-pip-repo
  stage: .pre
  script:
    - poetry export --format requirements.txt --with dev --output requirements-dev.txt
    - mkdir -p ci/pip-repo
    - pip3 download -r requirements-dev.txt --dest ci/pip-repo
  artifacts:
    paths:
      - requirements-dev.txt

iac-check:
  extends: .with-trivy-cache
  stage: lint
  image:
    name: $TRIVY_CI_IMAGE
    entrypoint: [""]
  script:
    - trivy config --exit-code 3 .
  needs: []

format-check:
  image: $PYTHON_CI_IMAGE
  stage: lint
  script:
    - ruff format --check
  needs: []

check:
  image: $PYTHON_CI_IMAGE
  stage: lint
  script:
    - ruff check
  needs: []

typecheck:
  extends: .with-local-pip-repo
  image: $PYTHON_CI_IMAGE
  stage: lint
  script:
    - python3 -m venv ci/venv
    - source ci/venv/bin/activate
    - pip install --no-index --find-links ci/pip-repo -r requirements-dev.txt
    - pip install -e .
    - mypy --python-executable "${VIRTUAL_ENV}/bin/python3" .

test:
  extends: .with-local-pip-repo
  image: $PYTHON_CI_IMAGE
  stage: test
  script:
    - python3 -m venv ci/venv
    - source ci/venv/bin/activate
    - pip install --no-index --find-links ci/pip-repo -r requirements-dev.txt
    - pip install -e .
    - coverage run -m pytest -v
    - coverage report
    - coverage xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

build:
  image: $PYTHON_CI_IMAGE
  stage: build
  script:
    - poetry build
    - PACKAGE_VERSION=$(poetry version --short)
    - printf 'PACKAGE_VERSION=%s\n' "$PACKAGE_VERSION" >version.env
  artifacts:
    paths:
      - dist
    reports:
      dotenv:
        - version.env

.build-image:
  extends: .with-registry-login
  stage: build
  image: $BUILDAH_CI_IMAGE
  script:
    - - buildah () { sudo -u build --preserve-env=SOURCE_DATE_EPOCH,REGISTRY_AUTH_FILE buildah --storage-driver=vfs ${CONTAINERS_REGISTRIES_CONF:+--registries-conf "$CONTAINERS_REGISTRIES_CONF"} "$@"; }
    - SOURCE_DATE_EPOCH=$(date +%s)
    # This export is for buildah itsef.
    - export SOURCE_DATE_EPOCH
    - buildah build
              --isolation chroot
              --format oci
              --timestamp "$SOURCE_DATE_EPOCH"
              --build-arg PACKAGE_TARBALL="ddam-${PACKAGE_VERSION}.tar.gz"
              --build-arg BASE_IMAGE="$PYTHON_BASE_IMAGE"
              --build-arg SOURCE_DATE_EPOCH="$SOURCE_DATE_EPOCH"
              --build-arg GIT_COMMIT_SHA="$CI_COMMIT_SHA"
              --arch "$ARCH"
              -t "${CI_REGISTRY_IMAGE}:${PACKAGE_VERSION}-${ARCH}"
              .
    - buildah inspect "${CI_REGISTRY_IMAGE}:${PACKAGE_VERSION}-${ARCH}"
    - buildah push "${CI_REGISTRY_IMAGE}:${PACKAGE_VERSION}-${ARCH}"
  needs:
    - build

build-image-amd64:
  extends: .build-image
  tags:
    - amd64-capable
  variables:
    ARCH: amd64

build-image-arm64:
  extends: .build-image
  tags:
    - arm64-capable
  variables:
    ARCH: arm64

.scan-image:
  extends: .with-trivy-cache
  stage: scan
  image:
    name: $TRIVY_CI_IMAGE
    entrypoint: [""]
  variables:
    TRIVY_USERNAME: $CI_REGISTRY_USER
    TRIVY_PASSWORD: $CI_REGISTRY_PASSWORD
  script:
    - trivy image "${CI_REGISTRY_IMAGE}:${PACKAGE_VERSION}-${ARCH}"
    - trivy image --severity HIGH,CRITICAL --exit-code 3 --ignore-unfixed "${CI_REGISTRY_IMAGE}:${PACKAGE_VERSION}-${ARCH}"

scan-amd64:
  extends: .scan-image
  variables:
    ARCH: amd64
  needs:
    - build
    - build-image-amd64

scan-arm64:
  extends: .scan-image
  variables:
    ARCH: arm64
  needs:
    - build
    - build-image-arm64

publish:
  image: $PYTHON_CI_IMAGE
  stage: publish
  script:
    - poetry publish
  needs:
    - build
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+/
    - when: manual
      allow_failure: true

publish-image:
  extends: .with-registry-login
  stage: publish
  image: $BUILDAH_CI_IMAGE
  script:
    - buildah () { sudo -u build --preserve-env=REGISTRY_AUTH_FILE buildah --storage-driver=vfs ${CONTAINERS_REGISTRIES_CONF:+--registries-conf "$CONTAINERS_REGISTRIES_CONF"} "$@"; }
    - buildah manifest create "${PUBLISH_IMAGE}:${PACKAGE_VERSION}"
    - buildah manifest add "${PUBLISH_IMAGE}:${PACKAGE_VERSION}" "${CI_REGISTRY_IMAGE}:${PACKAGE_VERSION}-amd64"
    - buildah manifest add "${PUBLISH_IMAGE}:${PACKAGE_VERSION}" "${CI_REGISTRY_IMAGE}:${PACKAGE_VERSION}-arm64"
    - buildah manifest push --all "${PUBLISH_IMAGE}:${PACKAGE_VERSION}" "docker://${PUBLISH_IMAGE}:${PACKAGE_VERSION}"
    - printf 'Pushed %s\n' "${PUBLISH_IMAGE}:${PACKAGE_VERSION}"
  needs:
    - build
    - scan-amd64
    - scan-arm64
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+/
    - when: manual
      allow_failure: true
